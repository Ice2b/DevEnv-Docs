{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"\u00dcbersicht Dieses Dokument soll dabei helfen, eine lauff\u00e4hige Entwicklungsumgebung in WSL2 mit PHPStorm, DDEV und ngrok f\u00fcr Symfony in Betrieb zu nehmen. Bedingungen Windows 10, Version 1903 oder h\u00f6her, mit Build 18362 oder h\u00f6her. Installierte WSL2 Layout","title":"Home"},{"location":"index.html#ubersicht","text":"Dieses Dokument soll dabei helfen, eine lauff\u00e4hige Entwicklungsumgebung in WSL2 mit PHPStorm, DDEV und ngrok f\u00fcr Symfony in Betrieb zu nehmen.","title":"\u00dcbersicht"},{"location":"index.html#bedingungen","text":"Windows 10, Version 1903 oder h\u00f6her, mit Build 18362 oder h\u00f6her. Installierte WSL2","title":"Bedingungen"},{"location":"index.html#layout","text":"","title":"Layout"},{"location":"index.html#_1","text":"","title":""},{"location":"additions.html","text":"Zus\u00e4tzliche Einstellungen Powerlevel Fonts F\u00fcr die korrekte Darstellung von Glyphen in den Terminals ist es wichtig, dass die Schriftarten Glyphen beinhalten. Diese Schriftarten k\u00f6nnen \u00fcber PowerShell nachinstalliert werden: PowerShell git clone https :// github . com / powerline / fonts . git Set-ExecutionPolicy Bypass -Scope Process -Force ; .\\ Fonts \\ install . ps1 oh-my-zsh und Powerlevel10k WSL Zuerst m\u00fcssen zsh und git installiert werden: sudo apt install zsh git Danach kann oh-my-zsh \u00fcber curl installiert werden: sh -c \" $( curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh ) \" Abschlie\u00dfend sollte zsh noch zur Standard-Shell gemacht werden: chsh -s $( which zsh ) Powerlevel10k ist ein Theme f\u00fcr oh-my-zsh, welches einige hilfreiche Dinge beinhaltet. Die Dokumentation ist recht umfangreich. git clone --depth = 1 https://github.com/romkatv/powerlevel10k.git ${ ZSH_CUSTOM :- $HOME /.oh-my-zsh/custom } /themes/powerlevel10k Aktiviert wird das Theme, indem in der Datei .zshrc die Zeile ZSH_THEME=\"robbyrussell\" zu ZSH_THEME=\"powerlevel10k/powerlevel10k\" ge\u00e4ndert wird. Zus\u00e4tzliche Kommandos f\u00fcr DDEV WSL Um nicht jedes Mal ddev exec php bin/console vor Symfony-Befehle schreiben zu m\u00fcssen, bietet DDEV die M\u00f6glichkeit, eigene Kommandos zu definieren. Mit dem folgenden Befehl werden unter ~/.ddev/commands/web/ drei neue Kommandos erstellt (DDEV muss mindestens ein Mal gestartet worden sein): ddev console: ddev exec php bin/console ddev doctrine: ddev exec php bin/console doctrine: ddev yarn: ddev exec yarn echo 'H4sIAAAAAAAAA+3VT2+CMBgGcM58ik69Glv+SMLJw/YFluxkdqhQhQwKaesc337ABjNuGe6AzuT5XRrghTZNn5eokLrIhDUmWgt8vxlZ4NPjseU6zGIe9TzKWEA9izK69F2L0FFX9WmvDVeEWPqw/7Vu6PmNmt4tNqlcbLhObHs6JfdCRyotTVrIkDzuJdFVvi1kRaKPg0JSqdNYEJMIchCb5rbhqRSqeflJ850I+9L1NuM7/UzWXNVDU/DwxvMyq0smcSxe+8Kcv4hQSJOaakIKdfI0LiKj6inCmBteL1SEkRLciIltl0lJmuV3pbOVfe0NvTHd5o45x2D+Pfck/4w6HvJ/CWfnvzsodSzznMtYn9MJ+pcGW0FfeRryr37wvSRWRUnm8+0PnaBvGrPVtbf4X6u4kmPPMZR/x23z7wZLlwYsaP7/DmXI/yUM5r85IOdEva0bjHn3NcOz7Cja7e0DN1FSR7m9wJ8cAAAAAAAAAAAAAAAAAOBv3gEgZVTfACgAAA==' | base64 -d | tar zxf - -C ~/.ddev/commands/web/","title":"Zus\u00e4tzliche Konfiguration"},{"location":"additions.html#zusatzliche-einstellungen","text":"","title":"Zus\u00e4tzliche Einstellungen"},{"location":"additions.html#powerlevel-fonts","text":"F\u00fcr die korrekte Darstellung von Glyphen in den Terminals ist es wichtig, dass die Schriftarten Glyphen beinhalten. Diese Schriftarten k\u00f6nnen \u00fcber PowerShell nachinstalliert werden: PowerShell git clone https :// github . com / powerline / fonts . git Set-ExecutionPolicy Bypass -Scope Process -Force ; .\\ Fonts \\ install . ps1","title":"Powerlevel Fonts"},{"location":"additions.html#oh-my-zsh-und-powerlevel10k","text":"WSL Zuerst m\u00fcssen zsh und git installiert werden: sudo apt install zsh git Danach kann oh-my-zsh \u00fcber curl installiert werden: sh -c \" $( curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh ) \" Abschlie\u00dfend sollte zsh noch zur Standard-Shell gemacht werden: chsh -s $( which zsh ) Powerlevel10k ist ein Theme f\u00fcr oh-my-zsh, welches einige hilfreiche Dinge beinhaltet. Die Dokumentation ist recht umfangreich. git clone --depth = 1 https://github.com/romkatv/powerlevel10k.git ${ ZSH_CUSTOM :- $HOME /.oh-my-zsh/custom } /themes/powerlevel10k Aktiviert wird das Theme, indem in der Datei .zshrc die Zeile ZSH_THEME=\"robbyrussell\" zu ZSH_THEME=\"powerlevel10k/powerlevel10k\" ge\u00e4ndert wird.","title":" oh-my-zsh und Powerlevel10k"},{"location":"additions.html#zusatzliche-kommandos-fur-ddev","text":"WSL Um nicht jedes Mal ddev exec php bin/console vor Symfony-Befehle schreiben zu m\u00fcssen, bietet DDEV die M\u00f6glichkeit, eigene Kommandos zu definieren. Mit dem folgenden Befehl werden unter ~/.ddev/commands/web/ drei neue Kommandos erstellt (DDEV muss mindestens ein Mal gestartet worden sein): ddev console: ddev exec php bin/console ddev doctrine: ddev exec php bin/console doctrine: ddev yarn: ddev exec yarn echo 'H4sIAAAAAAAAA+3VT2+CMBgGcM58ik69Glv+SMLJw/YFluxkdqhQhQwKaesc337ABjNuGe6AzuT5XRrghTZNn5eokLrIhDUmWgt8vxlZ4NPjseU6zGIe9TzKWEA9izK69F2L0FFX9WmvDVeEWPqw/7Vu6PmNmt4tNqlcbLhObHs6JfdCRyotTVrIkDzuJdFVvi1kRaKPg0JSqdNYEJMIchCb5rbhqRSqeflJ850I+9L1NuM7/UzWXNVDU/DwxvMyq0smcSxe+8Kcv4hQSJOaakIKdfI0LiKj6inCmBteL1SEkRLciIltl0lJmuV3pbOVfe0NvTHd5o45x2D+Pfck/4w6HvJ/CWfnvzsodSzznMtYn9MJ+pcGW0FfeRryr37wvSRWRUnm8+0PnaBvGrPVtbf4X6u4kmPPMZR/x23z7wZLlwYsaP7/DmXI/yUM5r85IOdEva0bjHn3NcOz7Cja7e0DN1FSR7m9wJ8cAAAAAAAAAAAAAAAAAOBv3gEgZVTfACgAAA==' | base64 -d | tar zxf - -C ~/.ddev/commands/web/","title":" Zus\u00e4tzliche Kommandos f\u00fcr DDEV"},{"location":"environment.html","text":"Installation der Entwicklungsumgebung Nachdem die Vorbereitung abgeschlossen ist, kann nun die Entwicklungsumgebung eingerichtet werden. Pr\u00fcfen der Voraussetzungen Bevor ddev installiert wird, sollte einmal gepr\u00fcft werden, ob auch alles funktioniert hat. WSL Zertifikatsspeicher Hier sollte in der Ausgabe der Windows-Pfad stehen (also etwas in der Art: /mnt/c/Users/<username>/AppData/Local/mkcert ) echo $CAROOT Docker Hier sollte in der Ausgabe die Docker-Version angezeigt werden (Docker version 20.10.5, build 55c4c88) docker -v ddev installieren In WSL werden nun gcc und DDEV installiert: WSL brew install gcc && brew install drud/ddev/ddev Wenn ddev launch genutzt werden soll (Ausf\u00fchren eines Browsers in der WSL-Umgebung), m\u00fcssen noch xdg-utils installiert werden: WSL sudo apt-get update && sudo apt-get install -y xdg-utils ngrok installieren WSL cd /tmp wget https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip sudo unzip ngrok-stable-linux-amd64.zip -d /usr/local/bin PHPStorm installieren Die aktuellste Version kann hier gefunden werden. WSL cd /tmp wget <Downloadlink> sudo tar -xzf PhpStorm-*.tar.gz -C /opt --one-top-level = PhpStorm --strip-components = 1 sudo ln -s /opt/PhpStorm/bin/phpstorm.sh /usr/local/bin/phpstorm Ab jetzt kann phpstorm durch den Befehl phpstorm \u00fcberall gestartet werden. Es empfiehlt sich jedoch, einen Alias anzulegen: echo alias phpstorm = 'phpstorm ./ nosplash </dev/null &>/dev/null &' >> ~/.bash_aliases Dieser startet PhpStorm im Hintergrund mit dem aktuellen Verzeichnis und verwirft alle Aus- und Eingaben aus stdin/stdout. Grafische Umgebung vorbereiten GWSL Die einfachste Variante ist wahrscheinlich GWSL . Diese App muss nur installiert werden (aus dem Windows-Store oder von Git) und funktioniert dann direkt. Hierzu sollte die Dokumentation bei Problemen konsultiert werden. Um Fenster aus der WSL heraus anzeigen zu k\u00f6nnen, m\u00fcssen noch einige Schritte vollzogen werden: X-Server unter Windows installieren ( VcXsrv , X410 , MobaXterm ) Server in WSL-Umgebung bekannt machen WSL Abh\u00e4ngigkeiten installieren: sudo apt update && sudo apt install libatk1.0 libatk-bridge2.0 libxtst6 libxi6 libpangocairo-1.0 libcups2 libnss3 xdg-utils Die Information \u00fcber den Server zur Profidatei in WSL hinzuf\u00fcgen: echo DISPLAY = $( awk '/^nameserver/ {print $2; exit;}' </etc/resolv.conf ) :0.0 >> ~/.profile Zus\u00e4tzliche Einstellungen in PhpStorm PhpStorm lauscht auf IPv6, was ein Problem f\u00fcr XDebug darstellt. Dies kann unter Help \u2192 Edit custom VM options ge\u00e4ndert werden. In der sich \u00f6ffnenden Datei muss am Ende - Djava . net . preferIPv4Stack = true hinzugef\u00fcgt werden.","title":"Entwicklungsumgebung"},{"location":"environment.html#installation-der-entwicklungsumgebung","text":"Nachdem die Vorbereitung abgeschlossen ist, kann nun die Entwicklungsumgebung eingerichtet werden.","title":"Installation der Entwicklungsumgebung"},{"location":"environment.html#prufen-der-voraussetzungen","text":"Bevor ddev installiert wird, sollte einmal gepr\u00fcft werden, ob auch alles funktioniert hat. WSL Zertifikatsspeicher Hier sollte in der Ausgabe der Windows-Pfad stehen (also etwas in der Art: /mnt/c/Users/<username>/AppData/Local/mkcert ) echo $CAROOT Docker Hier sollte in der Ausgabe die Docker-Version angezeigt werden (Docker version 20.10.5, build 55c4c88) docker -v","title":"Pr\u00fcfen der Voraussetzungen"},{"location":"environment.html#ddev-installieren","text":"In WSL werden nun gcc und DDEV installiert: WSL brew install gcc && brew install drud/ddev/ddev Wenn ddev launch genutzt werden soll (Ausf\u00fchren eines Browsers in der WSL-Umgebung), m\u00fcssen noch xdg-utils installiert werden: WSL sudo apt-get update && sudo apt-get install -y xdg-utils","title":"ddev installieren"},{"location":"environment.html#ngrok-installieren","text":"WSL cd /tmp wget https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip sudo unzip ngrok-stable-linux-amd64.zip -d /usr/local/bin","title":"ngrok installieren"},{"location":"environment.html#phpstorm-installieren","text":"Die aktuellste Version kann hier gefunden werden. WSL cd /tmp wget <Downloadlink> sudo tar -xzf PhpStorm-*.tar.gz -C /opt --one-top-level = PhpStorm --strip-components = 1 sudo ln -s /opt/PhpStorm/bin/phpstorm.sh /usr/local/bin/phpstorm Ab jetzt kann phpstorm durch den Befehl phpstorm \u00fcberall gestartet werden. Es empfiehlt sich jedoch, einen Alias anzulegen: echo alias phpstorm = 'phpstorm ./ nosplash </dev/null &>/dev/null &' >> ~/.bash_aliases Dieser startet PhpStorm im Hintergrund mit dem aktuellen Verzeichnis und verwirft alle Aus- und Eingaben aus stdin/stdout.","title":"PHPStorm installieren"},{"location":"environment.html#grafische-umgebung-vorbereiten","text":"GWSL Die einfachste Variante ist wahrscheinlich GWSL . Diese App muss nur installiert werden (aus dem Windows-Store oder von Git) und funktioniert dann direkt. Hierzu sollte die Dokumentation bei Problemen konsultiert werden. Um Fenster aus der WSL heraus anzeigen zu k\u00f6nnen, m\u00fcssen noch einige Schritte vollzogen werden: X-Server unter Windows installieren ( VcXsrv , X410 , MobaXterm ) Server in WSL-Umgebung bekannt machen WSL Abh\u00e4ngigkeiten installieren: sudo apt update && sudo apt install libatk1.0 libatk-bridge2.0 libxtst6 libxi6 libpangocairo-1.0 libcups2 libnss3 xdg-utils Die Information \u00fcber den Server zur Profidatei in WSL hinzuf\u00fcgen: echo DISPLAY = $( awk '/^nameserver/ {print $2; exit;}' </etc/resolv.conf ) :0.0 >> ~/.profile","title":"Grafische Umgebung vorbereiten"},{"location":"environment.html#zusatzliche-einstellungen-in-phpstorm","text":"PhpStorm lauscht auf IPv6, was ein Problem f\u00fcr XDebug darstellt. Dies kann unter Help \u2192 Edit custom VM options ge\u00e4ndert werden. In der sich \u00f6ffnenden Datei muss am Ende - Djava . net . preferIPv4Stack = true hinzugef\u00fcgt werden.","title":"Zus\u00e4tzliche Einstellungen in PhpStorm"},{"location":"faq.html","text":"H\u00e4ufige Probleme HTTPS funktioniert nicht unter Windows Folgende Probleme k\u00f6nnen dazu f\u00fchren: Die Zertifikate wurden unter Windows nicht generiert PowerShell mkcert -install Nach Ausf\u00fchrung des Befehls sollte das Verzeichnis %LOCALAPPDATA%\\mkcert existieren und zwei Dateien beinhalten: \ud83d\udcc2 %LOCALAPPDATA% \u2523\u2578\ud83d\udcc2 mkcert \u2503 \u2523\u2578\ud83d\udcc3 rootCA.pem \u2503 \u2517\u2578\ud83d\udcc3 rootCA-key.pem Der Zertifikatspeicher ist nicht in WSL verf\u00fcgbar Es kann sein, dass das Verzeichnis nicht korrekt in WSL gemappt wurde oder die Umgebungsvariable nicht richtig gesetzt ist. WSL echo $CAROOT Dieser Befehl sollte /mnt/c/Users/<username>/AppData/Local/mkcert \u00e4hnlich sehen. Ist dies nicht der Fall, so muss die Umgebungsvariable neu gesetzt werden. PowerShell setx CAROOT \" $( mkcert -CAROOT ) \" ; If ( $Env:WSLENV -notlike \"*CAROOT*\" ) { setx WSLENV \"CAROOT/up:$Env:WSLENV\" } localhost ist unter Windows nicht auf die WSL weitergeleitet","title":"FAQ"},{"location":"faq.html#haufige-probleme","text":"","title":"H\u00e4ufige Probleme"},{"location":"faq.html#https-funktioniert-nicht-unter-windows","text":"Folgende Probleme k\u00f6nnen dazu f\u00fchren:","title":"HTTPS funktioniert nicht unter Windows"},{"location":"faq.html#die-zertifikate-wurden-unter-windows-nicht-generiert","text":"PowerShell mkcert -install Nach Ausf\u00fchrung des Befehls sollte das Verzeichnis %LOCALAPPDATA%\\mkcert existieren und zwei Dateien beinhalten: \ud83d\udcc2 %LOCALAPPDATA% \u2523\u2578\ud83d\udcc2 mkcert \u2503 \u2523\u2578\ud83d\udcc3 rootCA.pem \u2503 \u2517\u2578\ud83d\udcc3 rootCA-key.pem","title":"Die Zertifikate wurden unter Windows nicht generiert"},{"location":"faq.html#der-zertifikatspeicher-ist-nicht-in-wsl-verfugbar","text":"Es kann sein, dass das Verzeichnis nicht korrekt in WSL gemappt wurde oder die Umgebungsvariable nicht richtig gesetzt ist. WSL echo $CAROOT Dieser Befehl sollte /mnt/c/Users/<username>/AppData/Local/mkcert \u00e4hnlich sehen. Ist dies nicht der Fall, so muss die Umgebungsvariable neu gesetzt werden. PowerShell setx CAROOT \" $( mkcert -CAROOT ) \" ; If ( $Env:WSLENV -notlike \"*CAROOT*\" ) { setx WSLENV \"CAROOT/up:$Env:WSLENV\" }","title":"Der Zertifikatspeicher ist nicht in WSL verf\u00fcgbar"},{"location":"faq.html#localhost-ist-unter-windows-nicht-auf-die-wsl-weitergeleitet","text":"","title":"localhost ist unter Windows nicht auf die WSL weitergeleitet"},{"location":"preparations.html","text":"Vorbereitende Schritte Im ersten Schritt werden einige hilfreiche Tools installiert: Windows Terminal Chocolatey mkcert Windows Terminal installieren Aus dem Microsoft-Store: Im Microsoft-Store ist das Programm verf\u00fcgbar. Von GitHub: Aus dem GitHub-Repo kann Windows Terminal installiert werden, wenn kein Zugriff auf den Windows Store besteht. Diese Version muss allerdings manuell aktuell gehalten werden. Chocolatey installieren Chocolatey ist ein Paketmanager f\u00fcr Windows. Installiert wird er \u00fcber die administrative PowerShell. Diese kann \u00fcber Win + X gestartet werden. PowerShell Set-ExecutionPolicy Bypass -Scope Process -Force ; [System.Net.ServicePointManager] :: SecurityProtocol = [System.Net.ServicePointManager] :: SecurityProtocol -bor 3072 ; iex (( New-Object System . Net . WebClient ). DownloadString ( 'https://chocolatey.org/install.ps1' )) SSL-Zertifikate vorbereiten mkcert generiert die lokalen ssl-Zertifikate im Windows Zertifikatspeicher, die sp\u00e4ter von DDEV genutzt werden. Daf\u00fcr werden in einem zweiten Schritt die Umgebungsvariablen gesetzt, damit die WSL-Umgebung den Zertifikatsspeicher von Windows nutzt. In der administrativen PowerShell ( Win + X ) folgende Befehle ausf\u00fchren: PowerShell choco install mkcert mkcert -install setx CAROOT \" $( mkcert -CAROOT ) \" ; If ( $Env:WSLENV -notlike \"*CAROOT*\" ) { setx WSLENV \"CAROOT/up:$Env:WSLENV\" } homebrew in der WSL Innerhalb der WSL muss homebrew installiert werden. Dazu wird sie gestartet: PowerShell wsl -d < Umgebungsname > In der WSL-Konsole wird nun homebrew installiert: Achtung Homebrew sollte in /home/linuxbrew/.linuxbrew installiert werden. WSL /bin/bash -c \" $( curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh ) \" Nach der Installation muss brew noch so eingerichtet werden, dass es auch nach einem Neustart noch verf\u00fcgbar ist: WSL test -d /home/linuxbrew/.linuxbrew && eval $( /home/linuxbrew/.linuxbrew/bin/brew shellenv ) test -r ~/.bash_profile && echo \"eval \\$( $( brew --prefix ) /bin/brew shellenv)\" >>~/.bash_profile echo \"eval \\$( $( brew --prefix ) /bin/brew shellenv)\" >>~/.profile","title":"Vorbereitung"},{"location":"preparations.html#vorbereitende-schritte","text":"Im ersten Schritt werden einige hilfreiche Tools installiert: Windows Terminal Chocolatey mkcert","title":"Vorbereitende Schritte"},{"location":"preparations.html#windows-terminal-installieren","text":"Aus dem Microsoft-Store: Im Microsoft-Store ist das Programm verf\u00fcgbar. Von GitHub: Aus dem GitHub-Repo kann Windows Terminal installiert werden, wenn kein Zugriff auf den Windows Store besteht. Diese Version muss allerdings manuell aktuell gehalten werden.","title":"Windows Terminal installieren"},{"location":"preparations.html#chocolatey-installieren","text":"Chocolatey ist ein Paketmanager f\u00fcr Windows. Installiert wird er \u00fcber die administrative PowerShell. Diese kann \u00fcber Win + X gestartet werden. PowerShell Set-ExecutionPolicy Bypass -Scope Process -Force ; [System.Net.ServicePointManager] :: SecurityProtocol = [System.Net.ServicePointManager] :: SecurityProtocol -bor 3072 ; iex (( New-Object System . Net . WebClient ). DownloadString ( 'https://chocolatey.org/install.ps1' ))","title":"Chocolatey installieren"},{"location":"preparations.html#ssl-zertifikate-vorbereiten","text":"mkcert generiert die lokalen ssl-Zertifikate im Windows Zertifikatspeicher, die sp\u00e4ter von DDEV genutzt werden. Daf\u00fcr werden in einem zweiten Schritt die Umgebungsvariablen gesetzt, damit die WSL-Umgebung den Zertifikatsspeicher von Windows nutzt. In der administrativen PowerShell ( Win + X ) folgende Befehle ausf\u00fchren: PowerShell choco install mkcert mkcert -install setx CAROOT \" $( mkcert -CAROOT ) \" ; If ( $Env:WSLENV -notlike \"*CAROOT*\" ) { setx WSLENV \"CAROOT/up:$Env:WSLENV\" }","title":"SSL-Zertifikate vorbereiten"},{"location":"preparations.html#homebrew-in-der-wsl","text":"Innerhalb der WSL muss homebrew installiert werden. Dazu wird sie gestartet: PowerShell wsl -d < Umgebungsname > In der WSL-Konsole wird nun homebrew installiert: Achtung Homebrew sollte in /home/linuxbrew/.linuxbrew installiert werden. WSL /bin/bash -c \" $( curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh ) \" Nach der Installation muss brew noch so eingerichtet werden, dass es auch nach einem Neustart noch verf\u00fcgbar ist: WSL test -d /home/linuxbrew/.linuxbrew && eval $( /home/linuxbrew/.linuxbrew/bin/brew shellenv ) test -r ~/.bash_profile && echo \"eval \\$( $( brew --prefix ) /bin/brew shellenv)\" >>~/.bash_profile echo \"eval \\$( $( brew --prefix ) /bin/brew shellenv)\" >>~/.profile","title":"homebrew in der WSL"}]}